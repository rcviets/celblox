{"version":3,"sources":["images/wave.svg","components/navLinks/index.js","components/nav/index.js","components/splashHero/index.js","components/getWaves/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavLinks","className","Item","Link","eventKey","style","color","Nav","Navbar","fixed","bg","variant","Brand","href","alt","src","width","height","Hero","Jumbotron","fluid","Container","Button","size","Angle","Image","WaveLogo","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,kC,gSCoB5BC,G,MAhBE,WACb,OACI,kBAAC,IAAD,CAAKC,UAAU,uBACX,kBAAC,IAAIC,KAAL,CAAUD,UAAU,WAChB,kBAAC,IAAIE,KAAL,CAAUC,SAAS,SAASC,MAAO,CAACC,MAAO,YAA3C,cAEJ,kBAAC,IAAIJ,KAAL,CAAUD,UAAU,WAChB,kBAAC,IAAIE,KAAL,CAAUC,SAAS,SAASC,MAAO,CAACC,MAAO,YAA3C,aAEJ,kBAAC,IAAIJ,KAAL,CAAUD,UAAU,WAChB,kBAAC,IAAIE,KAAL,CAAUC,SAAS,SAASC,MAAO,CAACC,MAAO,YAA3C,iBCWDC,G,MApBH,WACR,OACI,6BACI,kBAACC,EAAA,EAAD,CAAQC,MAAM,MAAMC,GAAG,QAAQC,QAAQ,QACnC,kBAACH,EAAA,EAAOI,MAAR,CAAcC,KAAK,SACf,yBACIC,IAAI,eACJC,IAAI,oBACJC,MAAM,QACNC,OAAO,OACPhB,UAAU,gCACX,IACH,wBAAIA,UAAU,aAAd,iCAA6D,IAC7D,kBAAC,EAAD,W,wBCOLiB,G,MAnBF,WACX,OACE,yBAAKjB,UAAU,cACb,kBAACkB,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACE,wBAAIpB,UAAU,WAAd,yBACA,wBAAIA,UAAU,WAAd,mBACA,yBAAKA,UAAU,UACb,kBAACqB,EAAA,EAAD,CAAQrB,UAAU,WAAWsB,KAAK,MAAlC,cAEU,U,6CCHPC,G,MARD,WACV,OACI,6BACI,kBAACC,EAAA,EAAD,CAAOxB,UAAU,YAAYc,IAAKW,IAAUN,OAAK,O,MCe9CO,MAhBf,WACE,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAKA,UAAU,SACf,kBAAC,EAAD,SCDc2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.acaf3b8c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wave.89a0298f.svg\";","import React from \"react\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport \"./style.css\";\r\n\r\nconst NavLinks = () => {\r\n    return (\r\n        <Nav className=\"justify-content-end\">\r\n            <Nav.Item className=\"navLink\">\r\n                <Nav.Link eventKey=\"link-1\" style={{color: \"#451F55\"}}>Customers</Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item className=\"navLink\">\r\n                <Nav.Link eventKey=\"link-2\" style={{color: \"#451F55\"}}>Partners</Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item className=\"navLink\">\r\n                <Nav.Link eventKey=\"link-2\" style={{color: \"#451F55\"}}>Resources</Nav.Link>\r\n            </Nav.Item>\r\n        </Nav>\r\n    );\r\n};\r\n\r\nexport default NavLinks;","import React from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport NavLinks from \"../navLinks\";\r\nimport \"./style.css\";\r\n\r\nconst Nav = () => {\r\n    return (\r\n        <div>\r\n            <Navbar fixed=\"top\" bg=\"light\" variant=\"dark\">\r\n                <Navbar.Brand href=\"#home\">\r\n                    <img\r\n                        alt=\"celblox logo\"\r\n                        src=\"/CelBlox_Logo.png\"\r\n                        width=\"319px\"\r\n                        height=\"60px\"\r\n                        className=\"d-inline-block align-bottom\"\r\n                    />{' '}\r\n                    <h5 className=\"brandText\">The Future Is Coming Together</h5>{' '}\r\n                    <NavLinks />\r\n                </Navbar.Brand>\r\n            </Navbar>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Nav;","import React from \"react\";\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Button from 'react-bootstrap/Button';\r\nimport \"./style.css\"\r\n\r\nconst Hero = () => {\r\n  return (\r\n    <div className=\"splashHero\">\r\n      <Jumbotron fluid>\r\n        <Container>\r\n          <h1 className=\"header1\">Sustainable. Durable.</h1>\r\n          <h1 className=\"header2\">Cost Effective.</h1>\r\n          <div className=\"button\">\r\n            <Button className=\"buttonLM\" size=\"lg\">\r\n              Learn More\r\n            </Button>{' '}\r\n          </div>\r\n        </Container>\r\n      </Jumbotron>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default Hero;","import React from \"react\";\r\nimport Image from \"react-bootstrap/Image\";\r\nimport WaveLogo from '../../images/wave.svg';\r\nimport \"./style.css\";\r\n\r\nconst Angle = () => {\r\n    return (\r\n        <div>\r\n            <Image className=\"waveImage\" src={WaveLogo} fluid />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Angle;","import React from 'react';\nimport Nav from './components/nav';\nimport Hero from './components/splashHero';\nimport MainPoints from './components/splashInfo'\nimport Angle from \"./components/getWaves\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Hero />\n      <div className=\"angle\">\n      <Angle />\n      </div>\n      {/* <div className=\"splashInfo\">\n        <MainPoints />\n      </div> */}\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}